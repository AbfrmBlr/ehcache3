/*
 * Copyright Terracotta, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id 'java'
  id 'maven'
  id 'com.github.johnrengelman.shadow' version '1.2.0'
}

def shadowBaseName = 'ehcache-clustered-entity'


def projectNamesToInclude = [':terracotta/clustered-ehcache-common', ':terracotta/clustered-ehcache-client-impl', ':terracotta/clustered-ehcache-server-impl', ':terracotta/clustered-ehcache-api',
':terracotta/clustered-ehcache']
def projectsToInclude = projectNamesToInclude.collect {project(it)}

dependencies {
  projectsToInclude.each {compile it}
}

shadowJar {
  baseName = shadowBaseName
  classifier = ''
  projectNamesToInclude.each {projName -> dependencies {include(project(projName))}}
  fillManifest(manifest, shadowBaseName)
  mergeServiceFiles()
}

task shadowSourceJar(type: Jar, dependsOn: shadowJar) {
  baseName = shadowBaseName
  classifier = 'sources'
  projectsToInclude.each {from it.sourceSets.main.allSource}
}

task aggregateJavadoc(type: Javadoc) {
  title "$shadowBaseName $version API"
  dependsOn projectsToInclude.javadoc
  source projectsToInclude.javadoc.source
  destinationDir file("$buildDir/docs/javadoc")
  classpath = files(projectsToInclude.javadoc.classpath)
}

task shadowJavadocJar(type: Jar) {
  dependsOn shadowJar, aggregateJavadoc
  baseName = shadowBaseName
  classifier = 'javadoc'

  from aggregateJavadoc.destinationDir
}

artifacts {
  archives shadowJar
  archives shadowJavadocJar
  archives shadowSourceJar
}


def artifactFiltering = {
  addFilter('shadow') {artifact, file ->
    artifact.name == shadowBaseName
  }

  def shadowPom = pom('shadow')
  shadowPom.groupId = 'org.ehcache'
  shadowPom.artifactId = shadowBaseName
  shadowPom.scopeMappings.mappings.remove(project.configurations.compile)
  shadowPom.scopeMappings.mappings.remove(project.configurations.runtime)
  shadowPom.scopeMappings.mappings.remove(project.configurations.testCompile)
  shadowPom.scopeMappings.mappings.remove(project.configurations.testRuntime)
  shadowPom.scopeMappings.addMapping(MavenPlugin.COMPILE_PRIORITY, project.configurations.shadow, Conf2ScopeMappingContainer.COMPILE)
  pomFiller(shadowPom, 'EhcacheEntity', 'EhcacheEntity single jar, containing all modules')
}

install {
  repositories.mavenInstaller artifactFiltering
}
